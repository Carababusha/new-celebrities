@page "/setup"
@inject NavigationManager NavigationManager
@inject OptionLister OptionLister
@*@inject Microsoft.Extensions.Localization.IStringLocalizer<Setup> L*@

<div class="container m-auto max-w-3xl px-4">

    <div class="flex flex-col space-y-8">
        <h1 class="text-3xl font-bold tracking-widest uppercase text-center">
            @*@L["SetUpGame"]*@
            Setup game
        </h1>

        <div class="flex flex-col space-y-3">
            <h2 class="@Styles.SmallHeader">
                Teams
            </h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                @foreach (var team in teams)
                {
                    <span class="flex text-xl font-semibold rounded" style="background-color:@team.Color.BackgroundColor">
                        <span class="flex items-center p-2" style="color:@team.Color.TextColor">
                            <svg class="w-8 h-8" fill="none" stroke="currentColor"
                             viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                  stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                            </svg>
                        </span>

                        <input class="w-full my-3 mx-1 px-4 py-2 transition duration-300 border border-@Colors.TextLight rounded focus:border-transparent focus:outline-none focus:ring-2 focus:ring-@Colors.LightBackground" @bind=team.Name />

                        <button type="button" @onclick="() => RemoveTeam(team) " style="color:@team.Color.TextColor" class="bg-transparent hover:text-white rounded-lg text-sm p-1.5 ml-auto inline-flex items-start">
                            <svg aria-hidden="true" class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                            <span class="sr-only">Remove team</span>
                        </button>
                    </span>
                }
            </div>

            <div>

                <CustomButton OnClick="AddTeam" AdditionalStyles="" Height="CustomButton.ButtonHeight.Small">

                    <svg class="w-6 h-6 -mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6">

                        </path>
                    </svg>
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>
                </CustomButton>
            </div>
        </div>

        <div class="flex flex-col space-y-4">
            <h2 class="@Styles.SmallHeader">
                Options
            </h2>

            <div class="flex items-center space-x-4">
                <label for="cardCount" class="text-lg whitespace-nowrap font-semibold no-wrap">Total cards</label>
                <div class="">
                    <input type="number" id="cardCount"
                           @bind="options.CardCount"
                           min="@Deck.Min"
                           max="@Deck.Max"
                           class="@Styles.InputStyle"
                           aria-describedby="cardCountHelp">
                </div>
                <small id="cardCountHelp" class="text-sm text-@Colors.TextMuted">
                    Total number of characters that will be added to the deck. Recomended between 20-60.
                </small>
            </div>

            <div class="flex items-center space-x-4">
                <label for="roundCount" class="text-lg whitespace-nowrap font-semibold">Rounds</label>
                <div class="">
                    <input type="number" id="roundCount"
                           @bind="options.RoundCount"
                           min="@RoundFactory.MinimunRounds"
                           max="@RoundFactory.MaximunRounds"
                           class="@Styles.InputStyle"
                           aria-describedby="roundsHelp">
                </div>
                <small id="roundsHelp" class="text-sm text-@Colors.TextMuted">
                    Total number of rounds that will be played. Must be between 1-4. Recomended is 3.
                </small>
            </div>

            <div class="flex items-center space-x-4">
                <label for="seconds" class="text-lg whitespace-nowrap font-semibold">Time</label>
                <div class="">
                    <input type="number" id="seconds"
                           @bind="options.Seconds"
                           min="10"
                           max="120"
                           class="@Styles.InputStyle"
                           aria-describedby="secondsHelp">
                </div>
                <small id="secondsHelp" class="text-sm text-@Colors.TextMuted">
                    Seconds per turn for each team.
                </small>
            </div>
        </div>

        <div>
            <h2 class="@Styles.SmallHeader">
                Categories
            </h2>
           @* <nav class="navbar navbar-expand-lg navbar-light bg-light p-0 mb-3">
                <div class="form-inline my-2 my-lg-0">
                    <div class="input-group">
                        <input class="form-control form-control-sm"
                               type="search"
                               placeholder="Search"
                               aria-label="Search"
                               aria-describedby="searchButton">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary btn-sm my-2 my-sm-0"
                                    type="submit"
                                    id="searchButton"
                                    @onclick="Search">
                                <span class="oi oi-magnifying-glass" title="search" aria-hidden="true"></span>
                            </button>
                        </div>
                    </div>
                </div>

                <button class="btn btn-light btn-sm ml-4" @onclick="SelectAll">
                    select all categories
                </button>
                <button class="btn btn-light btn-sm ml-4" @onclick="UnselectAll">
                    unselect all categories
                </button>
            </nav>*@

            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">

            @foreach (var (category, index) in categories.Select((item, index) => (item, index)))
            {
                <div class="flex items-center mb-4">
                    <input id="category-@index" type="checkbox" value="" class="w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                    <label for="category-@index" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">@category</label>
                </div>
            }
            </div>

        </div>

        <div>
            <h2 class="@Styles.SmallHeader">
                Countries
            </h2>
            @* <nav class="navbar navbar-expand-lg navbar-light bg-light p-0 mb-3">
            <div class="form-inline my-2 my-lg-0">
            <div class="input-group">
            <input class="form-control form-control-sm"
            type="search"
            placeholder="Search"
            aria-label="Search"
            aria-describedby="searchButton">
            <div class="input-group-append">
            <button class="btn btn-outline-secondary btn-sm my-2 my-sm-0"
            type="submit"
            id="searchButton"
            @onclick="Search">
            <span class="oi oi-magnifying-glass" title="search" aria-hidden="true"></span>
            </button>
            </div>
            </div>
            </div>

            <button class="btn btn-light btn-sm ml-4" @onclick="SelectAll">
            select all categories
            </button>
            <button class="btn btn-light btn-sm ml-4" @onclick="UnselectAll">
            unselect all categories
            </button>
            </nav>*@

            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">

                @foreach (var (country, index) in countries.Select((item, index) => (item, index)))
                {
                    <div class="flex items-center mb-4">
                        <input id="country-@index" type="checkbox" value="" class="w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                        <label for="country-@index" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">@country</label>
                    </div>
                }
            </div>

        </div>

        <CustomButton OnClick="StartGame" AdditionalStyles="w-full" Height="CustomButton.ButtonHeight.Big">
            PLAY
            @*@L["StartGame"]*@
        </CustomButton>
    </div>

</div>


@code {
    private List<string> categories = new List<string>();
    private List<string> countries = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        categories = (await OptionLister.ListCategories()).ToList();
        countries = (await OptionLister.ListCountries()).ToList();
    }

    private GameOptionsModel options = new GameOptionsModel()
        {
            CardCount = 20,
            IncludeEasy = true,
            RoundCount = 3
        };

    private List<TeamModel> teams = new List<TeamModel>()
    {
       new TeamModel(Color.Bluemoon),
       new TeamModel(Color.Lemon)
    };

    private void AddTeam()
    {
        var alreadyChosenColors = teams.Select(x => x.Color).ToList();
        var color = Color.All.FirstOrDefault(color => !alreadyChosenColors.Contains(color));

        if (color is not null)
        {
            teams.Add(new TeamModel(color));
        }
    }

    private void RemoveTeam(TeamModel team)
    {
        teams.Remove(team);
    }

    private void StartGame()
    {
        options.Teams = teams.Select(x => new GameOptionsModel.Team()
            {
                Name = x.Name,
                ColorIndex = x.Color.Index
            });
        //Save game setup to localstorage
        Console.WriteLine(teams);
        //NavigationManager.NavigateTo("play");
    }

    private class TeamModel
    {
        public Color Color { get; set; }
        public string Name { get; set; }

        public TeamModel(Color color)
        {
            Color = color;
            Name = color.ToString();
        }
    }
}
